import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';

// Configurar el comportamiento de las notificaciones
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
    priority: Notifications.AndroidNotificationPriority.HIGH,
  }),
} as any);

// Solicitar permisos para notificaciones
export const requestNotificationPermissions = async (): Promise<boolean> => {
  try {
    console.log('üîí Solicitando permisos para notificaciones...');
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    console.log('üîí Estado actual de permisos:', existingStatus);
    
    let finalStatus = existingStatus;
    
    if (existingStatus !== 'granted') {
      console.log('üîí Solicitando permisos expl√≠citamente...');
      const { status } = await Notifications.requestPermissionsAsync({
        ios: {
          allowAlert: true,
          allowBadge: true,
          allowSound: true,
        },
      });
      finalStatus = status;
      console.log('üîí Resultado de solicitud de permisos:', finalStatus);
    }
    
    if (finalStatus !== 'granted') {
      console.log('‚ùå Permisos de notificaci√≥n denegados');
      return false;
    }
    
    console.log('‚úÖ Permisos de notificaci√≥n concedidos');
    return true;
  } catch (error) {
    console.error('‚ùå Error solicitando permisos de notificaci√≥n:', error);
    return false;
  }
};

// Programar una notificaci√≥n para un recordatorio
export const scheduleRecordatorioNotification = async (
  recordatorioId: string,
  titulo: string,
  descripcion: string,
  fechaLimite: string
): Promise<string | null> => {
  console.log('üöÄ Iniciando programaci√≥n de notificaci√≥n en notifications.ts');
  console.log('Par√°metros recibidos:');
  console.log('- recordatorioId:', recordatorioId);
  console.log('- titulo:', titulo);
  console.log('- descripcion:', descripcion);
  console.log('- fechaLimite:', fechaLimite);
  try {
    // Verificar permisos primero
    const hasPermissions = await requestNotificationPermissions();
    if (!hasPermissions) {
      console.log('‚ùå No hay permisos para programar notificaci√≥n');
      return null;
    }

    // Imprimir la fecha l√≠mite recibida para depuraci√≥n
    console.log('üìÜ Fecha recibida para notificaci√≥n:', fechaLimite);
    console.log('üìÜ Tipo de dato:', typeof fechaLimite);
    
    // Parsear la fecha l√≠mite - asegurando que no haya problema con el formato
    let fechaNotificacion;
    try {
      fechaNotificacion = new Date(fechaLimite);
      
      // Mostrar informaci√≥n detallada de zona horaria para depuraci√≥n
      console.log('üìÜ Fecha parseada:');
      console.log('- ISO (UTC):', fechaNotificacion.toISOString());
      console.log('- Local:', fechaNotificacion.toLocaleString());
      console.log('- Offset zona horaria (minutos):', fechaNotificacion.getTimezoneOffset());
      
      // Verificar si es una fecha v√°lida
      if (isNaN(fechaNotificacion.getTime())) {
        console.log('‚ùå Fecha inv√°lida recibida');
        return null;
      }
    } catch (error) {
      console.log('‚ùå Error al parsear la fecha:', error);
      return null;
    }
    
    // Obtener la fecha actual
    const ahora = new Date();
    console.log('üìÜ Fecha actual:', ahora.toISOString());
    
    // Usar nuestra funci√≥n de utilidad para ver informaci√≥n detallada de la fecha
    debugDate('Fecha de notificaci√≥n antes de ajustes', fechaNotificacion);
    
    // Si la fecha ya tiene una hora espec√≠fica (como 08:00), respetamos esa hora
    const tieneHoraEspecifica = fechaLimite.includes('T');
    console.log('üìÜ ¬øTiene hora espec√≠fica?', tieneHoraEspecifica);
    
    if (!tieneHoraEspecifica) {
      // Si no tiene hora espec√≠fica, configuramos para las 8:00 AM en hora local
      fechaNotificacion.setHours(8, 0, 0, 0);
      console.log('üìÜ Fecha ajustada a 8:00 AM:');
      debugDate('Despu√©s de ajustar a 8:00 AM', fechaNotificacion);
    }
    
    // Comparar fechas para debug
    console.log('üìÜ Fecha notificaci√≥n < ahora?', fechaNotificacion < ahora);
    
    // Si la fecha de notificaci√≥n ya pas√≥, verificar si es por la hora o por el d√≠a
    if (fechaNotificacion < ahora) {
      console.log('‚ö†Ô∏è La hora de notificaci√≥n ya pas√≥ para hoy');
      
      // Verificar si es el mismo d√≠a
      const esMismoDia = 
        fechaNotificacion.getDate() === ahora.getDate() &&
        fechaNotificacion.getMonth() === ahora.getMonth() &&
        fechaNotificacion.getFullYear() === ahora.getFullYear();
      
      console.log('üìÜ ¬øEs el mismo d√≠a?', esMismoDia);
      
      // Si es la misma fecha pero despu√©s de las 8:00 AM, programar para ma√±ana
      if (esMismoDia) {
        console.log('üîÑ Programando para el d√≠a siguiente a las 8:00 AM');
        fechaNotificacion.setDate(fechaNotificacion.getDate() + 1);
        console.log('üìÜ Nueva fecha de notificaci√≥n:', fechaNotificacion.toISOString());
      } else {
        // Si es una fecha pasada, usar la primera hora disponible (5 segundos desde ahora para pruebas)
        console.log('‚ö†Ô∏è La fecha seleccionada es anterior a hoy, usando fecha actual + 5 segundos');
        fechaNotificacion = new Date(Date.now() + 5000);
      }
    }
    
    // Calcular segundos hasta la fecha de notificaci√≥n
    let secondsUntilNotification = Math.floor((fechaNotificacion.getTime() - Date.now()) / 1000);
    
    // Si la fecha ya pas√≥, programar para 10 segundos en el futuro
    if (secondsUntilNotification <= 0) {
      console.log('‚ùå La fecha de notificaci√≥n ya pas√≥, se programar√° para 10 segundos');
      secondsUntilNotification = 10;
    }
    
    console.log('‚è±Ô∏è Segundos hasta la notificaci√≥n:', secondsUntilNotification);

    // Programar la notificaci√≥n usando segundos desde ahora (formato correcto seg√∫n documentaci√≥n)
    const notificationId = await Notifications.scheduleNotificationAsync({
      content: {
        title: 'üîî Recordatorio VetControl',
        body: `${titulo}: ${descripcion}`,
        sound: true,
        priority: Notifications.AndroidNotificationPriority.HIGH,
        data: {
          recordatorioId,
          type: 'recordatorio',
        },
      },
      trigger: {
        seconds: secondsUntilNotification > 0 ? secondsUntilNotification : 10,
        channelId: 'default',
        type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,
      },
    });

    console.log(
      `‚úÖ Notificaci√≥n programada:
      - Fecha original: ${new Date(fechaLimite).toLocaleString()}
      - Fecha notificaci√≥n (local): ${fechaNotificacion.toLocaleString()}
      - Fecha notificaci√≥n (ISO/UTC): ${fechaNotificacion.toISOString()}
      - Segundos para notificaci√≥n: ${secondsUntilNotification}
      - ID: ${notificationId}`
    );
    return notificationId;
  } catch (error) {
    console.error('‚ùå Error programando notificaci√≥n:', error);
    return null;
  }
};

// Cancelar una notificaci√≥n programada
export const cancelRecordatorioNotification = async (notificationId: string): Promise<void> => {
  try {
    await Notifications.cancelScheduledNotificationAsync(notificationId);
    console.log(`‚úÖ Notificaci√≥n cancelada: ${notificationId}`);
  } catch (error) {
    console.error('‚ùå Error cancelando notificaci√≥n:', error);
  }
};

// Obtener todas las notificaciones programadas
export const getScheduledNotifications = async () => {
  try {
    const scheduled = await Notifications.getAllScheduledNotificationsAsync();
    console.log('üìÖ Notificaciones programadas:', scheduled.length);
    return scheduled;
  } catch (error) {
    console.error('‚ùå Error obteniendo notificaciones programadas:', error);
    return [];
  }
};

// Programar notificaci√≥n de prueba (para testing)
export const scheduleTestNotification = async (): Promise<void> => {
  try {
    const hasPermissions = await requestNotificationPermissions();
    if (!hasPermissions) {
      console.log('‚ö†Ô∏è No se puede enviar notificaci√≥n de prueba: permisos denegados');
      return;
    }

    console.log('üß™ Programando notificaci√≥n de prueba para 10 segundos desde ahora');
    
    // Usar el formato correcto seg√∫n la documentaci√≥n de Expo Notifications
    const testId = await Notifications.scheduleNotificationAsync({
      content: {
        title: 'üß™ Notificaci√≥n de Prueba',
        body: 'Esta es una notificaci√≥n de prueba para VetControl',
        sound: true,
        priority: Notifications.AndroidNotificationPriority.HIGH,
      },
      trigger: {
        seconds: 10,
        channelId: 'default',
        type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL
      },
    });
    
    console.log('üß™ ID de notificaci√≥n de prueba:', testId);
    console.log('‚úÖ Notificaci√≥n de prueba programada para 10 segundos');
  } catch (error) {
    console.error('‚ùå Error programando notificaci√≥n de prueba:', error);
  }
};

// Funci√≥n de utilidad para depuraci√≥n de fechas
const debugDate = (label: string, date: Date): void => {
  console.log(`üìÖ ${label}:`);
  console.log(`- ISO (UTC): ${date.toISOString()}`);
  console.log(`- Local: ${date.toLocaleString()}`);
  console.log(`- Fecha local: ${date.toLocaleDateString()}`);
  console.log(`- Hora local: ${date.toLocaleTimeString()}`);
  console.log(`- Offset zona horaria (minutos): ${date.getTimezoneOffset()}`);
  console.log(`- Getters locales - D√≠a: ${date.getDate()}, Mes: ${date.getMonth() + 1}, A√±o: ${date.getFullYear()}, Hora: ${date.getHours()}:${date.getMinutes()}`);
};

// Inicializar las notificaciones
export const initNotifications = async (): Promise<void> => {
  try {
    console.log('üöÄ Inicializando sistema de notificaciones...');
    
    // Verificar informaci√≥n de zona horaria y fechas actuales
    console.log('üìÖ Informaci√≥n de zona horaria:');
    const ahora = new Date();
    debugDate('Fecha actual', ahora);
    console.log('üíª Plataforma:', Platform.OS);
    
    // Prueba r√°pida de zona horaria
    const testDate = new Date('2025-07-04T08:00:00');
    debugDate('Fecha de prueba 08:00 AM', testDate);
    
    // Solicitar permisos
    const hasPermissions = await requestNotificationPermissions();
    if (!hasPermissions) {
      console.log('‚ö†Ô∏è No se pudieron obtener permisos para notificaciones');
      return;
    }
    
    // Crear el canal de notificaciones (solo Android)
    if (Platform.OS === 'android') {
      console.log('üì± Configurando canal de notificaciones para Android');
      await Notifications.setNotificationChannelAsync('default', {
        name: 'VetControl',
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#3B82F6',
      });
      console.log('‚úÖ Canal de notificaciones configurado');
    }
    
    console.log('‚úÖ Sistema de notificaciones inicializado correctamente');
  } catch (error) {
    console.error('‚ùå Error inicializando notificaciones:', error);
  }
};
